# -*- coding: utf-8 -*-
import os
import telebot
from telebot import types, apihelper

import output
import exceptions
import expenses
from course import course_currency
from weather import weather_forecast
from categories import Categories
from timesheet import Homework, Lesson

import config


bot = telebot.TeleBot(token=os.getenv("TOKEN"))

user_markup_menu = telebot.types.ReplyKeyboardMarkup(True, True)
user_markup_menu.row("/timesheet")
user_markup_menu.row("/finance")
user_markup_menu.row("/course")
user_markup_menu.row("/weather")

user_markup_menu_timesheet = telebot.types.ReplyKeyboardMarkup(True, True)
user_markup_menu_timesheet.row("/homework")
user_markup_menu_timesheet.row("/schedule")
user_markup_menu_timesheet.row("/menu")

user_do_menu_timesheet = telebot.types.ReplyKeyboardMarkup(True, True)
user_do_menu_timesheet.row("/today")
user_do_menu_timesheet.row("/tomorow")
user_do_menu_timesheet.row("/week")
user_do_menu_timesheet.row("/add")
user_do_menu_timesheet.row("/edit")
user_do_menu_timesheet.row("/delete")
user_do_menu_timesheet.row("/menu")

user_markup_finance = telebot.types.ReplyKeyboardMarkup(True, True)
user_markup_finance.row("/today")
user_markup_finance.row("/month")
user_markup_finance.row("/expenses")
user_markup_finance.row("/categories")
user_markup_finance.row("/menu")

@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""

    bot.send_message(message.from_user.id,
                     "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüòâ!\n"
                     "–Ø –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\n–†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–ºüìñ/timesheet\nC–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏üí∞ "
                     "/finance\n–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Çüíµ /course\n–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—Éüå§ /weather\n ",
                     reply_markup=user_markup_menu)


@bot.message_handler(commands=['menu'])
def start_message(message):
    bot.send_message(message.from_user.id, "–ú–µ–Ω—é –ë–æ—Ç–∞:", reply_markup=user_markup_menu)


@bot.message_handler(commands=['timesheet'])
def start_message(message):
    """–í–≤—ã–≤–æ–¥ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    bot.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–¥—ã –†–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=user_markup_menu_timesheet)


@bot.message_handler(commands=['homework'])
def start_message(message):
    """–í–≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∑"""
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=user_do_menu_timesheet)
    bot.register_next_step_handler(msg, process_command_step_homework)


def process_command_step_homework(message):
    if message.text == "/today":
        try:
            answer = Homework().get_today_homework()
            bot.send_message(message.from_user.id,
                             output.one_day_homework(answer),
                             reply_markup=user_markup_menu_timesheet)
        except:
            bot.send_message(message.from_user.id,
                             "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç—É",
                             reply_markup=user_markup_menu_timesheet)

    elif message.text == "/tomorow":
        try:
            answer = Homework().get_tomorow_homework()
            bot.send_message(message.from_user.id,
                             output.one_day_homework(answer),
                             reply_markup=user_markup_menu_timesheet)
        except:
            bot.send_message(message.from_user.id,
                             "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç—É",
                             reply_markup=user_markup_menu_timesheet)

    elif message.text == "/week":
        try:
            answer = Homework().get_week_homework()
            bot.send_message(message.from_user.id,
                             output.week_homework(answer),
                             reply_markup=user_markup_menu_timesheet)
        except:
            bot.send_message(message.from_user.id,
                             "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç—É",
                             reply_markup=user_markup_menu_timesheet)

    elif message.text == "/add":
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} {–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞} {–î–∞—Ç—É –≤ "
                               "—Ñ–æ—Ä–º–∞—Ç–µ Y-m-d}",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, add_homework)

    elif message.text == "/edit":
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} {–î–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Y-m-d}",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, edit_homework)

    elif message.text == "/delete":
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} {–î–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Y-m-d}",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, delete_homework)


def add_homework(message):
    try:
        answer = list(message.text.split())
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ :",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, add_homework_hm, answer)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    return


def add_homework_hm(message, answer):
    try:
        response = message.text
        answer.append(response)
        response = Homework().add_homework(answer)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=user_markup_menu_timesheet)
    return


def edit_homework(message):
    try:
        answer = list(message.text.split())
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ :", reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, edit_homework_hm, answer)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    return


def edit_homework_hm(message, answer):
    try:
        response = message.text
        answer.append(response)
        response = Homework().edit_homework(answer)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–æ", reply_markup=user_markup_menu_timesheet)
    return


def delete_homework(message):
    try:
        answer = Homework().delete_homework(message)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–æ", reply_markup=user_markup_menu_timesheet)
    return


@bot.message_handler(commands=['schedule'])
def start_message(message):
    """–í–≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=user_do_menu_timesheet)
    bot.register_next_step_handler(msg, process_command_step_schedule)


def process_command_step_schedule(message):
    if message.text == "/today":
        try:
            answer = Lesson().get_timetable_today()
            bot.send_message(message.from_user.id,
                             output.one_day_timetable(answer),
                             reply_markup=user_markup_menu_timesheet)
        except:
            bot.send_message(message.from_user.id,
                             "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                             reply_markup=user_markup_menu_timesheet)

    elif message.text == "/tomorow":
        try:
            answer = Lesson().get_timetable_tomorow()
            bot.send_message(message.from_user.id,
                             output.one_day_timetable(answer),
                             reply_markup=user_markup_menu_timesheet)
        except:
            bot.send_message(message.from_user.id,
                             "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                             reply_markup=user_markup_menu_timesheet)

    elif message.text == "/week":
        try:
            answer = Lesson().get_all_timetable()
            bot.send_message(message.from_user.id,
                             output.week_timetable(answer),
                             reply_markup=user_markup_menu_timesheet)
        except:
            bot.send_message(message.from_user.id,
                             "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                             reply_markup=user_markup_menu_timesheet)
    elif message.text == "/add":
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                               "{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} {–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞}",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, add_schedule)

    elif message.text == "/edit":
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} "
                               "{–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å}",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, edit_schedule)

    elif message.text == "/delete":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞}",
                               reply_markup=user_markup_menu_timesheet)
        bot.register_next_step_handler(msg, delete_schedule)


def add_schedule(message):
    try:
        answer = Lesson().add_lesson(message)
    except:
        bot.send_message(message.chat.id,
                         "–û—à–∏–±–∫–∞",
                         reply_markup=user_markup_menu_timesheet)
        return
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=user_markup_menu_timesheet)
    return


def edit_schedule(message):
    try:
        answer = Lesson().edit_lesson(message)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–æ", reply_markup=user_markup_menu_timesheet)
    return


def delete_schedule(message):
    try:
        Lesson().delete_lesson(message)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞", reply_markup=user_markup_menu_timesheet)
        return
    bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–æ", reply_markup=user_markup_menu_timesheet)
    return


@bot.message_handler(commands=['finance'])
def start_message(message):
    """–í–≤—ã–≤–æ–¥ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
    bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã: 250 —Ç–∞–∫—Å–∏\n"
                                           "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /today\n"
                                           "–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: /month\n"
                                           "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: /expenses\n"
                                           "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç: /categories",
                                           reply_markup=user_markup_finance)


@bot.message_handler(commands=['expenses'])
def list_expenses(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    last_expenses = expenses.last()
    if not last_expenses:
        bot.send_message(message.from_user.id, "–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
        return

    last_expenses_rows = [
        f"{expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for expense in last_expenses]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n* " + "\n\n* " \
        .join(last_expenses_rows)
    bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(regexp="^[0-9]{1,}")
def add_expense(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
    try:
        answ = message.text
        expense = expenses.add_expense(answ)
    except:
        bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        return
    answer_message = "–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {} —Ä—É–± –Ω–∞ {}\n\n".format(expense.amount, expense.category_name)
    bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(regexp="/del[0-9]{1,}")
def del_expense(message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    try:
        row_id = int(message.text[4:])
        expenses.delete_expense(row_id)
        answer_message = "–£–¥–∞–ª–∏–ª"
        bot.send_message(message.from_user.id, answer_message)
    except:
        answer_message = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É"
        bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(commands=['categories'])
def categories_list(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n* " + \
                     ("\n* ".join([c.name + ' (' + ", ".join(c.aliases) + ')' for c in categories]))
    bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(commands=['today'])
def today_statistics(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"""
    answer_message = expenses.get_today_statistics()
    bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(commands=['month'])
def month_statistics(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    answer_message = expenses.get_month_statistics()
    bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(commands=['course'])
def start_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
    user_do_menu_course = telebot.types.ReplyKeyboardMarkup(True, True)
    user_do_menu_course.row("USD")
    user_do_menu_course.row("EUR")
    user_do_menu_course.row("RUR")
    user_do_menu_course.row("UAH")
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=user_do_menu_course)
    bot.register_next_step_handler(msg, process_coin_step)


def process_coin_step(message):
    try:
        menu_remove = types.ReplyKeyboardRemove()
        user_markup_after_do = telebot.types.ReplyKeyboardMarkup(True, True)
        user_markup_after_do.row("/menu")
        user_markup_after_do.row("/course")
        bot.send_message(message.chat.id, course_currency(message.text), reply_markup=user_markup_after_do)

    except Exception as e:
        bot.reply_to(message, 'ooops!')


@bot.message_handler(commands=['weather'])
def start_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã"""
    user_do_menu_weather = telebot.types.ReplyKeyboardMarkup(True, True)
    user_do_menu_weather.row("–†—É–∑–∞–µ–≤–∫–∞")
    user_do_menu_weather.row("–°–∞—Ä–∞–Ω—Å–∫")
    user_do_menu_weather.row("–ú–æ—Å–∫–≤–∞")
    user_do_menu_weather.row("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                           reply_markup=user_do_menu_weather)
    bot.register_next_step_handler(msg, process_weather_step)


def process_weather_step(message):
    try:
        menu_remove = types.ReplyKeyboardRemove()
        user_markup_after_do = telebot.types.ReplyKeyboardMarkup(True, True)
        user_markup_after_do.row("/menu")
        user_markup_after_do.row("/weather")
        bot.send_message(message.chat.id, weather_forecast(message.text), reply_markup=user_markup_after_do)

    except Exception as e:
        bot.reply_to(message, 'ooops2!')


if __name__ == '__main__':
    bot.polling()
