# -*- coding: utf-8 -*-
import telebot
from telebot import types
from telebot import apihelper

import exceptions
import expenses
from course import course_json
from weath import weather
from categories import Categories
import output
import timesheet

import config

apihelper.proxy = config.PROXY
bot = telebot.TeleBot(token=config.TOKEN)

user_markup_menu_timesheet = telebot.types.ReplyKeyboardMarkup(True, True)
user_markup_menu_timesheet.row("/homework")
user_markup_menu_timesheet.row("/schedule")
user_markup_menu_timesheet.row("–ú–µ–Ω—é")

user_do_menu = telebot.types.ReplyKeyboardMarkup(True, True)
user_do_menu.row("/today")
user_do_menu.row("/tomorow")
user_do_menu.row("/week")
user_do_menu.row("/add")
user_do_menu.row("/edit")
user_do_menu.row("/delete")
user_do_menu.row("–ú–µ–Ω—é")

@bot.message_handler(commands=['start', 'help'])
def start_message(message):
	"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
	user_markup = telebot.types.ReplyKeyboardMarkup(True, True)
	user_markup.row("/timesheet")
	user_markup.row("/finance")
	user_markup.row("/course")
	user_markup.row("/weather")

	bot.send_message(message.from_user.id,
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüòâ!\n"
    "–Ø –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\nC–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏üí∞ /expenses\n–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Çüíµ /course\n–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—Éüå§ /weather\n"
	"–î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã: 250 —Ç–∞–∫—Å–∏\n"
	"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /today\n"
	"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: /month\n"
	"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: /expenses\n"
    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç: /categories",reply_markup=user_markup)

@bot.message_handler(commands=['timesheet'])
def start_message(message):
	"""–í–≤—ã–≤–æ–¥ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
	bot.send_message(message.from_user.id,"–ö–æ–º–∞–Ω–¥—ã –†–∞—Å–ø–∏—Å–∞–Ω–∏—è:",reply_markup=user_markup_menu_timesheet)

@bot.message_handler(commands=['homework'])
def start_message(message):
	"""–í–≤—ã–≤–æ–¥ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
	msg = bot.send_message(message.chat.id, "-------------------:",reply_markup=user_do_menu)
	bot.register_next_step_handler(msg, process_command_step_homework)

def process_command_step_homework(message):
	if message.text == "/today":
		try:
			answer = timesheet.get_today_homework()
			bot.send_message(message.from_user.id, output.one_day_homework(answer),reply_markup=user_markup_menu_timesheet)
		except:
			bot.send_message(message.from_user.id, "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç—É",reply_markup=user_markup_menu_timesheet)
	
	elif message.text == "/tomorow":
		try:
			answer = timesheet.get_tomorow_homework()
			bot.send_message(message.from_user.id, output.one_day_homework(answer),reply_markup=user_markup_menu_timesheet)
		except:
			bot.send_message(message.from_user.id, "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç—É",reply_markup=user_markup_menu_timesheet)
	
	elif message.text == "/week":	
		try:
			answer = timesheet.get_week_homework()
			bot.send_message(message.from_user.id, output.week_homework(answer),reply_markup=user_markup_menu_timesheet)
		except:
			bot.send_message(message.from_user.id, "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç—É",reply_markup=user_markup_menu_timesheet)

@bot.message_handler(commands=['schedule'])
def start_message(message):
	"""–í–≤—ã–≤–æ–¥ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
	msg = bot.send_message(message.chat.id, "-------------------:",reply_markup=user_do_menu)
	bot.register_next_step_handler(msg, process_command_step_schedule)

def process_command_step_schedule(message):
	if message.text == "/today":
		try:
			answer = timesheet.get_timetable_today()
			bot.send_message(message.from_user.id, output.one_day_timetable(answer),reply_markup=user_markup_menu_timesheet)
		except:
			bot.send_message(message.from_user.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",reply_markup=user_markup_menu_timesheet)
	
	elif message.text == "/tomorow":
		try:
			answer = timesheet.get_timetable_tomorow()
			bot.send_message(message.from_user.id, output.one_day_timetable(answer),reply_markup=user_markup_menu_timesheet)
		except:
			bot.send_message(message.from_user.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",reply_markup=user_markup_menu_timesheet)
	
	elif message.text == "/week":	
		try:
			answer = timesheet.get_all_timetable()
			bot.send_message(message.from_user.id, output.week_timetable(answer),reply_markup=user_markup_menu_timesheet)
		except:
			bot.send_message(message.from_user.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",reply_markup=user_markup_menu_timesheet)
	elif message.text == "/add":	
		msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏} {–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞} {–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞}",reply_markup=user_markup_menu_timesheet)
		bot.register_next_step_handler(msg, add_schedule)


def add_schedule(message):
	try:
		answer = timesheet.add_lesson(message)
	except:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞",reply_markup=user_markup_menu_timesheet)
		return
	bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ",reply_markup=user_markup_menu_timesheet)
	return

@bot.message_handler(commands=['finance'])
def start_message(message):
	"""–í–≤—ã–≤–æ–¥ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
	user_markup2 = telebot.types.ReplyKeyboardMarkup(True, True)
	user_markup2.row("/today")
	user_markup2.row("/month")
	user_markup2.row("/expenses")
	user_markup2.row("/categories")
	user_markup2.row("–ú–µ–Ω—é")
	
	bot.send_message(message.from_user.id,"–§—É–Ω–∫—Ü–∏–∏ –ë–æ—Ç–∞ –¥–ª—è –§–∏–Ω–∞–Ω—Å–æ–≤:",reply_markup=user_markup2)

@bot.message_handler(commands=['expenses'])
def list_expenses(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    last_expenses = expenses.last()
    if not last_expenses:
        bot.send_message(message.from_user.id,"–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
        return

    last_expenses_rows = [
        f"{expense.amount} —Ä—É–±. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for expense in last_expenses]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n* " + "\n\n* "\
            .join(last_expenses_rows)
    bot.send_message(message.from_user.id,answer_message)


@bot.message_handler(regexp="/del[0-9]{1,}")
def del_expense(message):
	"""–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
	try:
		row_id = int(message.text[4:])
		expenses.delete_expense(row_id)
		answer_message = "–£–¥–∞–ª–∏–ª"
		bot.send_message(message.from_user.id,answer_message)
	except:
		answer_message = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É"
		bot.send_message(message.from_user.id,answer_message)


@bot.message_handler(commands=['categories'])
def categories_list(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n* " +\
            ("\n* ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories]))
    bot.send_message(message.from_user.id,answer_message)


@bot.message_handler(commands=['today'])
def today_statistics(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"""
    answer_message = expenses.get_today_statistics()
    bot.send_message(message.from_user.id,answer_message)


@bot.message_handler(commands=['month'])
def month_statistics(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    answer_message = expenses.get_month_statistics()
    bot.send_message(message.from_user.id,answer_message)


@bot.message_handler(commands=['course'])
def start_message(message):
	"""–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"""
	user_markup2 = telebot.types.ReplyKeyboardMarkup(True, True)
	user_markup2.row("USD")
	user_markup2.row("EUR")
	user_markup2.row("RUR")
	user_markup2.row("UAH")
	msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup=user_markup2)
	bot.register_next_step_handler(msg, process_coin_step)

def process_coin_step(message):
	try:
		menu_remove=types.ReplyKeyboardRemove()
		user_markup_menu = telebot.types.ReplyKeyboardMarkup(True, True)
		user_markup_menu.row("–ú–µ–Ω—é")
		user_markup_menu.row("/course")
		bot.send_message(message.chat.id, course_json(message.text),reply_markup=user_markup_menu)

	except Exception as e:
		bot.reply_to(message, 'ooops!')


@bot.message_handler(commands=['weather'])
def start_message(message):
	"""–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã"""
	user_markup3 = telebot.types.ReplyKeyboardMarkup(True, True)
	user_markup3.row("–†—É–∑–∞–µ–≤–∫–∞")
	user_markup3.row("–°–∞—Ä–∞–Ω—Å–∫")
	user_markup3.row("–ú–æ—Å–∫–≤–∞")
	user_markup3.row("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
	msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup=user_markup3)
	bot.register_next_step_handler(msg, process_weather_step)

def process_weather_step(message):
	try:
		menu_remove=types.ReplyKeyboardRemove()
		user_markup_menu = telebot.types.ReplyKeyboardMarkup(True, True)
		user_markup_menu.row("–ú–µ–Ω—é")
		user_markup_menu.row("/weather")
		bot.send_message(message.chat.id, weather(message.text),reply_markup=user_markup_menu)

	except Exception as e:
		bot.reply_to(message, 'ooops2!')


@bot.message_handler(regexp="[0-9]{1,}")
def add_expense(message):
	"""–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
	try:
		answ=message.text
		expense = expenses.add_expense(answ)
	except:
		bot.send_message(message.from_user.id,"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
	
	answer_message ="–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {} —Ä—É–± –Ω–∞ {}\n\n".format(expense.amount,expense.category_name)
	bot.send_message(message.from_user.id, answer_message)


@bot.message_handler(content_types=['text'])
def start_message(message):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é"""
	if message.text == "–ú–µ–Ω—é":
		user_markup = telebot.types.ReplyKeyboardMarkup(True, True)
		user_markup.row("/timesheet")
		user_markup.row("/finance")
		user_markup.row("/course")
		user_markup.row("/weather")

		bot.send_message(message.from_user.id, "–ú–µ–Ω—é –ë–æ—Ç–∞:",reply_markup=user_markup)

	# if message.text == "–°–µ–≥–æ–¥–Ω—è":
	# 	"""–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
	# 	try:
	# 		answ=message.text
	# 		print(answ)
	# 		homework = timesheet.get_today_homework()
	# 		answer_message = output.normalize(homework)
	# 		bot.send_message(message.from_user.id, answer_message)
	# 	except:
	# 		bot.send_message(message.from_user.id,"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
		
# @bot.message_handler(commands=['help'])
# def start_message(message):
# 	keyboard1 = telebot.types.ReplyKeyboardMarkup(True,True)
# 	keyboard1.row('/start')
# 	bot.send_message(message.chat.id,"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/course - –ö—É—Ä—Å –≤–∞–ª—é—Ç\n/weather - –ü–æ–≥–æ–¥–∞\n/help - –ø–æ–º–æ—â—å",reply_markup=keyboard1)

# @bot.message_handler(commands=['course'])
# def start_message(message):
# 	user_markup2 = telebot.types.ReplyKeyboardMarkup(True, True)
# 	user_markup2.row("USD")
# 	user_markup2.row("EUR")
# 	msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É:",reply_markup=user_markup2)
# 	bot.register_next_step_handler(msg, process_coin_step)

# def process_coin_step(message):
# 	try:
# 		menu_remove=types.ReplyKeyboardRemove()
# 		bot.send_message(message.chat.id, course_json(message.text),reply_markup=menu_remove)

# 	except Exception as e:
# 		bot.reply_to(message, 'ooops!')


# @bot.message_handler(commands=['weather'])
# def start_message(message):
# 	user_markup3 = telebot.types.ReplyKeyboardMarkup(True, True)
# 	user_markup3.row("–†—É–∑–∞–µ–≤–∫–∞")
# 	user_markup3.row("–ú–æ—Å–∫–≤–∞")
# 	msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:",reply_markup=user_markup3)
# 	bot.register_next_step_handler(msg, process_weather_step)

# def process_weather_step(message):
# 	try:
# 		menu_remove=types.ReplyKeyboardRemove()
# 		bot.send_message(message.chat.id, weather(message.text),reply_markup=menu_remove)

# 	except Exception as e:
# 		bot.reply_to(message, 'ooops2!')


if __name__ == '__main__':
	bot.polling()
